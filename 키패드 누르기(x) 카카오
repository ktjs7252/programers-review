#include <string>
#include <vector>

using namespace std;

int phone[3][2];
int dx[]={-1,0,1,0};
int dy[]={0,-1,0,1};
int now_left_x=3;
int now_left_y=0;
int now_right_x=3;
int now_right_y=2;

void left_find(int x,int now_left_x,int now_left_y)
{
    int i,j;
    
    for(i=0;i<=3;i++)
    {
        for(j=0;j<=2;j++)
        {
            if(phone[i][j]==x)
            {
                now_left_x=i;
                now_left_y=j;
            }
        }
    }
}

void right_find(int x,int now_right_x,int now_right_y)
{
    int i,j;
    
    for(i=0;i<=3;i++)
    {
        for(j=0;j<=2;j++)
        {
            if(phone[i][j]==x)
            {
                now_right_x=i;
                now_right_y=j;
            }
        }
    }
}
int bfs(int i,int j,int target)
{
    bool visited[4][3] = {0};
    visited[i][j] = true;
    queue<pair<int, int>> q;
    q.push({i, j});
    int distance = 0;

    if (phone[i][j] == target) {
        return distance;
    }

    while (!q.empty()) {
        int y = q.front().first; // y 축
        int x = q.front().second;// x 축 
        q.pop();
        distance++;

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i]; // new x 축
            int ny = y + dy[i]; // new y 축 

            if (nx >= 0 && nx < 3 && ny >= 0 && ny < 4 && !visited[ny][nx]) { // 이 조건에 충족하면 범위 내부 라는 뜻 
                if (phone[ny][nx] == target) { // 종료 조건 
                    return distance;
                }
                else {
                    visited[ny][nx] = true;
                    q.push({ny, nx});
                }
            }
        }
    }
    return distance;
    
    
    
}
string solution(vector<int> numbers, string hand) {
    string answer = "";
    int idx=1;
    for(int i=0;i<=3;i++)
    {
        for(int j=0;j<=2;j++)
        {
            phone[i][j]=idx++;
        }
    }
    phone[3][0]=-1;
    phone[3][1]=0;
    phone[3][2]=-1;
    
    for(int i=0;i<numbers.size();i++)
    {
        if(numbers[i]==1 || numbers[i]==4 || numbers[i]==7)
        {
            answer[i]="L";
            left_find(numbers[i],now_left_x,now_left_y);
        }
        else if(numbers[i]==3 || numbers[i]==6 || numbers[i]==9)
        {
            answer[i]="R";
            right_find(numbers[i],now_rigth_x,now_right_y);
        }
        else
        {
            if(bfs(now_left_x,now_left_y)==bfs(now_right_x,now_right_y))
            {
                if(hand=="left")
                {
                    answer[i]="L";
                    left_find(numbers[i],now_left_x,now_left_y);
                }
                else if(hand=="right")
                {
                    answer[i]="R";
                    right_find(numbers[i],now_right_x,now_right_y);
                }
            }
            else if(bfs(numbers[i],now_left_x,now_left_y)<bfs(numbers[i],now_right_x,now_right_y))
            {
                answer[i]="L";
                left_find(numbers[i],now_left_x,now_left_y);
            }
            else if(bfs(numbers[i],now_left_x,now_left_y)>bfs(numbers[i],now_right_x,now_right_y))
            {
                answer[i]="R";
                right_find(numbers[i],now_right_x,now_right_y);
            }
        }
    }
    
    return answer;
}


-------------------------------------------------------두번째 시도
#include <string>
#include <vector>

using namespace std;

int phone[4][3];
int now_left_x=3;
int now_left_y=0;
int now_right_x=3;
int now_right_y=2;
int dx[]={-1,0,1,0};
int dy[]={0,-1,0,1};

void now(int x,int y,int num)
{
    int i,j;
    
    for(i=0;i<4;i++)
    {
        for(j=0;j<3;j++)
        {
            if(phone[i][j]==num)
            {
                x=i;
                y=j;
            }
        }
    }
}

int bfs(int x,int y,int num)
{
    bool visited[4][3] = {0};
    visited[x][y] = true;
    queue<pair<int, int>> q;
    q.push({x, y});
    int distance = 0;

    if (phone[x][y] == num) {
        return distance;
    }

    while (!q.empty()) {
        int y = q.front().first; 
        int x = q.front().second;
        q.pop();
        distance++;

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i]; 

            if (nx >= 0 && nx < 3 && ny >= 0 && ny < 4 && !visited[ny][nx]) { 
                if (phone[ny][nx] == num) {  
                    return distance;
                }
                else {
                    visited[ny][nx] = true;
                    q.push({ny, nx});
                }
            }
        }
    }
    return distance;
    
}

string solution(vector<int> numbers, string hand) {
    char answer[1002];
    int idx=1;
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<3;j++)
        {
            phone[i][j]=idx++;
        }
    }
    phone[3][0]=-1;
    phone[3][1]=0;
    phone[3][2]=-1;
    
    for(int i=0;i<numbers.size();i++)
    {
        if(numbers[i]==1 || numbers[i]==4 || numbers[i]==7)
        {
            now(now_left_x,now_left_y,numbers[i]);
            answer[i]='L';
        }
        else if(numbers[i]==3 || numbers[i]==6 || numbers[i]==9)
        {
            now(now_right_x,now_right_y,numbers[i]);
            answer[i]='R';
        }
        else
        {
            if(bfs(now_left_x,now_left_y,numbers[i])<bfs(now_right_x,now_right_y,numbers[i]))
            {
                now(now_left_x,now_left_y,numbers[i]);
                answer[i]='L';
            }
            else if(bfs(now_left_x,now_left_y,numbers[i])>bfs(now_right_x,now_right_y,numbers[i]))
            {
                now(now_right_x,now_right_y,numbers[i]);
                answer[i]='R';
            }
            else if(bfs(now_left_x,now_left_y,numbers[i])==bfs(now_right_x,now_right_y,numbers[i]))
            {
                if(hand=="left")
                {
                     now(now_left_x,now_left_y,numbers[i]);
                    answer[i]='L';
                }
                else
                {
                     now(now_right_x,now_right_y,numbers[i]);
                    answer[i]='R';
                }
            }
            
        }
    }
   
    return answer;
}

-------------------------------------------------------------------------
#include <bits/stdc++.h>

using namespace std;
int arr[3][4];
int right_x=3,right_y=0,left_x=3,left_y=2;
int visited[3][4];
int dx[]={-1,0,1,0};
int dy[]={0,-1,0,1};

int find_length(int i,int j,int num)
{
    memset(visited,0,sizeof(visited));
    queue<pair<int,int>> q;
    visited[i][j]=1;
    q.push({i,j});
    
    while(q.size())
    {
        int x=q.front().first;
        int y=q.front().second;
        q.pop();
        if(arr[x][y]==num)
        {
            return visited[x][y];
        }
        
        for(int i=0;i<4;i++)
        {
            int nx=x+dx[i];
            int ny=y+dy[i];
            
            if(nx>=0 && ny>=0 && nx<4 && ny<3 && visited[nx][ny]!=0)
            {
                q.push({nx,ny});
                visited[nx][ny]=visited[x][y]+1;
            }
        }
    }
    
}

string solution(vector<int> numbers, string hand) {
    string answer = "";
    int idx=1;
    
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            arr[i][j]=idx;
            idx++;
        }
    }
    arr[3][0]=-1;
    arr[3][1]=0;
    arr[3][2]=-1;
    
    for(int i=0;i<numbers.size();i++)
    {
        if(numbers[i]==1 || numbers[i]==4 ||numbers[i]==7)
        {
            answer+='L';
            if(numbers[i]==1) left_x=0; left_y=0;
            if(numbers[i]==4) left_x=1;left_y=0;
            if(numbers[i]==7) left_x=2;left_y=0;
            continue;
        }
        else if(numbers[i]==3 || numbers[i]==6 || numbers[i]==9)
        {
            answer+='R';
            if(numbers[i]==3) right_x=0; right_y=2;
            if(numbers[i]==6) right_x=1; right_y=2;
            if(numbers[i]==9) right_x=2; right_y=2;
            continue;
        }
        else
        {
            int left_length=find_length(left_x,left_y,numbers[i]);
            int right_length=find_length(right_x,right_y,numbers[i]);
            if(left_length>right_length)
            {
                answer+='L';
            }
            else if(right_length>left_length)
            {
                answer+='R';
            }
            else
            {
                if(hand=="right")
                {
                    answer+='R';
                }
                else
                {
                    answer+='L';
                }
            }
        }
    }
    
    
    return answer;
}
