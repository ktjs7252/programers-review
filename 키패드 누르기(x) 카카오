#include <string>
#include <vector>

using namespace std;

int phone[3][2];
int dx[]={-1,0,1,0};
int dy[]={0,-1,0,1};
int now_left_x=3;
int now_left_y=0;
int now_right_x=3;
int now_right_y=2;

void left_find(int x,int now_left_x,int now_left_y)
{
    int i,j;
    
    for(i=0;i<=3;i++)
    {
        for(j=0;j<=2;j++)
        {
            if(phone[i][j]==x)
            {
                now_left_x=i;
                now_left_y=j;
            }
        }
    }
}

void right_find(int x,int now_right_x,int now_right_y)
{
    int i,j;
    
    for(i=0;i<=3;i++)
    {
        for(j=0;j<=2;j++)
        {
            if(phone[i][j]==x)
            {
                now_right_x=i;
                now_right_y=j;
            }
        }
    }
}
int bfs(int i,int j,int target)
{
    bool visited[4][3] = {0};
    visited[i][j] = true;
    queue<pair<int, int>> q;
    q.push({i, j});
    int distance = 0;

    if (phone[i][j] == target) {
        return distance;
    }

    while (!q.empty()) {
        int y = q.front().first; // y 축
        int x = q.front().second;// x 축 
        q.pop();
        distance++;

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i]; // new x 축
            int ny = y + dy[i]; // new y 축 

            if (nx >= 0 && nx < 3 && ny >= 0 && ny < 4 && !visited[ny][nx]) { // 이 조건에 충족하면 범위 내부 라는 뜻 
                if (phone[ny][nx] == target) { // 종료 조건 
                    return distance;
                }
                else {
                    visited[ny][nx] = true;
                    q.push({ny, nx});
                }
            }
        }
    }
    return distance;
    
    
    
}
string solution(vector<int> numbers, string hand) {
    string answer = "";
    int idx=1;
    for(int i=0;i<=3;i++)
    {
        for(int j=0;j<=2;j++)
        {
            phone[i][j]=idx++;
        }
    }
    phone[3][0]=-1;
    phone[3][1]=0;
    phone[3][2]=-1;
    
    for(int i=0;i<numbers.size();i++)
    {
        if(numbers[i]==1 || numbers[i]==4 || numbers[i]==7)
        {
            answer[i]="L";
            left_find(numbers[i],now_left_x,now_left_y);
        }
        else if(numbers[i]==3 || numbers[i]==6 || numbers[i]==9)
        {
            answer[i]="R";
            right_find(numbers[i],now_rigth_x,now_right_y);
        }
        else
        {
            if(bfs(now_left_x,now_left_y)==bfs(now_right_x,now_right_y))
            {
                if(hand=="left")
                {
                    answer[i]="L";
                    left_find(numbers[i],now_left_x,now_left_y);
                }
                else if(hand=="right")
                {
                    answer[i]="R";
                    right_find(numbers[i],now_right_x,now_right_y);
                }
            }
            else if(bfs(numbers[i],now_left_x,now_left_y)<bfs(numbers[i],now_right_x,now_right_y))
            {
                answer[i]="L";
                left_find(numbers[i],now_left_x,now_left_y);
            }
            else if(bfs(numbers[i],now_left_x,now_left_y)>bfs(numbers[i],now_right_x,now_right_y))
            {
                answer[i]="R";
                right_find(numbers[i],now_right_x,now_right_y);
            }
        }
    }
    
    return answer;
}
