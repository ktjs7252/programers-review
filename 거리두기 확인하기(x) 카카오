#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int dx[]={-1,0,1,0};
int dy[]={0,-1,0,1};
int visited[5][5];

int solve(int z,int x,int y)
{
    int i,j,nx,ny,nnx,nny;
    visited[x][y]=1;
    
    for(i=0;i<4;i++)
    {
        nx=x+dx[i];
        ny=y+dy[i];
        
        if(nx>=0 && nx<5 && ny>=0 && ny<5)
        {
            if(places[z][nx][ny]=='O')
            {
                for(j=0;j<4;j++)
                {
                    nnx=nx+dx[j];
                    nny=ny+dy[j];
                    
                    if(nnx>=0 && nnx<5 && nny>=0 && nny<5)
                    {
                        if(visited[nnx][nny]==0 && places[z][nnx][nny=='P'])
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
    
    return 0;
}


// places_rows는 2차원 배열 places의 행 길이, places_cols는 2차원 배열 places의 열 길이입니다.
// 파라미터로 주어지는 문자열은 const로 주어집니다. 변경하려면 문자열을 복사해서 사용하세요.
int* solution(const char*** places, size_t places_rows, size_t places_cols) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int* answer = (int*)malloc(sizeof(int)*6);
    int i,j,k;
    
    for(i=0;i<5;i++)
    {
        for(j=0;j<5;j++)
        {
            for(k=0;k<5;k++)
            {
                if(places[i][j][k]=='P')
                {
                    visited[5][5]={0};
                    if(solve(i,j,k)==1)
                    {
                        answer[i]=0;
                    }
                }
            }
        }
        if(answer[i]!=0)
        {
            answer[i]=1;
        }
        
    }
    return answer;
}
